//
// Address.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class Address: Codable, Hashable {

    public var city: String?
    public var country: String?
    public var countryCode: String?
    public var description: String?
    public var district: String?
    public var districtSection: String?
    public var houseNo: String?
    public var postalCode: String?
    public var state: String?
    public var street: String?

    public init(city: String? = nil, country: String? = nil, countryCode: String? = nil, description: String? = nil, district: String? = nil, districtSection: String? = nil, houseNo: String? = nil, postalCode: String? = nil, state: String? = nil, street: String? = nil) {
        self.city = city
        self.country = country
        self.countryCode = countryCode
        self.description = description
        self.district = district
        self.districtSection = districtSection
        self.houseNo = houseNo
        self.postalCode = postalCode
        self.state = state
        self.street = street
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case city
        case country
        case countryCode
        case description
        case district
        case districtSection
        case houseNo
        case postalCode
        case state
        case street
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(district, forKey: .district)
        try container.encodeIfPresent(districtSection, forKey: .districtSection)
        try container.encodeIfPresent(houseNo, forKey: .houseNo)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(street, forKey: .street)
    }

    public static func == (lhs: Address, rhs: Address) -> Bool {
        lhs.city == rhs.city &&
        lhs.country == rhs.country &&
        lhs.countryCode == rhs.countryCode &&
        lhs.description == rhs.description &&
        lhs.district == rhs.district &&
        lhs.districtSection == rhs.districtSection &&
        lhs.houseNo == rhs.houseNo &&
        lhs.postalCode == rhs.postalCode &&
        lhs.state == rhs.state &&
        lhs.street == rhs.street
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(city?.hashValue)
        hasher.combine(country?.hashValue)
        hasher.combine(countryCode?.hashValue)
        hasher.combine(description?.hashValue)
        hasher.combine(district?.hashValue)
        hasher.combine(districtSection?.hashValue)
        hasher.combine(houseNo?.hashValue)
        hasher.combine(postalCode?.hashValue)
        hasher.combine(state?.hashValue)
        hasher.combine(street?.hashValue)
        
    }
}

