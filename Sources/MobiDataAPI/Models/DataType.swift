//
// DataType.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public enum DataType: String, Codable, CaseIterable {
    case evchargingdispenser = "EVChargingDispenser"
    case evchargingstation = "EVChargingStation"
    case evchargingstationsession = "EVChargingStationSession"
    case airlinecode = "airlineCode"
    case airport = "airport"
    case airportbuilding = "airportBuilding"
    case arrival = "arrival"
    case arrivalflight = "arrivalFlight"
    case baggageclaim = "baggageClaim"
    case bikerental = "bikeRental"
    case bikesharingbike = "bikesharingBike"
    case bikesharingstation = "bikesharingStation"
    case building = "building"
    case busstation = "busStation"
    case businessarea = "businessArea"
    case carrental = "carRental"
    case carsharingcar = "carsharingCar"
    case carsharingoperator = "carsharingOperator"
    case carsharingstation = "carsharingStation"
    case catering = "catering"
    case checkincounter = "checkInCounter"
    case coachstation = "coachStation"
    case commerce = "commerce"
    case constrainedarearoutingpolicy = "constrainedAreaRoutingPolicy"
    case coupon = "coupon"
    case currentweather = "currentWeather"
    case departure = "departure"
    case departureflight = "departureFlight"
    case departuretimetable = "departureTimetable"
    case detectorvalues = "detectorValues"
    case elevator = "elevator"
    case entrance = "entrance"
    case escalator = "escalator"
    case fcdhistorycount = "fcdHistoryCount"
    case flightcheckincounter = "flightCheckInCounter"
    case flightgate = "flightGate"
    case floatingcardata = "floatingCarData"
    case floatingcardatahistory = "floatingCarDataHistory"
    case forecastweather = "forecastWeather"
    case fuelstation = "fuelStation"
    case gate = "gate"
    case geonetlink = "geoNetLink"
    case geocoding = "geocoding"
    case geocodingproposal = "geocodingProposal"
    case geocodingreverse = "geocodingReverse"
    case geofence = "geofence"
    case holiday = "holiday"
    case image = "image"
    case immislinkvalues = "immisLinkValues"
    case incidentaccessrestrictionstreetextended = "incidentAccessRestrictionStreetExtended"
    case incidentevent = "incidentEvent"
    case incidenteventextended = "incidentEventExtended"
    case incidentindoor = "incidentIndoor"
    case incidentparticulatematter = "incidentParticulateMatter"
    case incidentpublictransport = "incidentPublicTransport"
    case incidentstreet = "incidentStreet"
    case incidentstreetextended = "incidentStreetExtended"
    case incidenttollstreetextended = "incidentTollStreetExtended"
    case infodesk = "infoDesk"
    case longdistancetrainstation = "longDistanceTrainStation"
    case losvalue = "losValue"
    case meetingpoint = "meetingPoint"
    case mobilityimpaired = "mobilityImpaired"
    case monitoring = "monitoring"
    case netlink = "netLink"
    case netlinksegment = "netLinkSegment"
    case other = "other"
    case parkandrideroutingpolicy = "parkAndRideRoutingPolicy"
    case parkingbike = "parkingBike"
    case parkingbus = "parkingBus"
    case parkingcar = "parkingCar"
    case parkingcard2d = "parkingCarD2D"
    case parkinghandicapped = "parkingHandicapped"
    case parkingroutingpolicy = "parkingRoutingPolicy"
    case parkingspace = "parkingSpace"
    case particulatematterroutingpolicy = "particulateMatterRoutingPolicy"
    case passcontrol = "passControl"
    case personalassist = "personalAssist"
    case pointofinterest = "pointOfInterest"
    case preferredconnectionroutingpolicy = "preferredConnectionRoutingPolicy"
    case punctualitydata = "punctualityData"
    case redirectionroutingpolicy = "redirectionRoutingPolicy"
    case regionaltrainstation = "regionalTrainStation"
    case ridesharing = "ridesharing"
    case scootersharingscooter = "scootersharingScooter"
    case scootersharingstation = "scootersharingStation"
    case securitycheck = "securityCheck"
    case service = "service"
    case shop = "shop"
    case shuttlebusstation = "shuttleBusStation"
    case sight = "sight"
    case signtriggerline = "signTriggerLine"
    case speedlosvalue = "speedLosValue"
    case stairs = "stairs"
    case taxi = "taxi"
    case taxirank = "taxiRank"
    case toilet = "toilet"
    case trafficdetector = "trafficDetector"
    case trafficdetectorgroup = "trafficDetectorGroup"
    case trafficdetectorgrouplosvalue = "trafficDetectorGroupLosValue"
    case trafficdetectorgroupvalues = "trafficDetectorGroupValues"
    case trafficdetectorvalues = "trafficDetectorValues"
    case trafficfreeflowspeed = "trafficFreeFlowSpeed"
    case trafficinformationcamera = "trafficInformationCamera"
    case trafficintensity = "trafficIntensity"
    case trafficlight = "trafficLight"
    case trafficlighttriggerline = "trafficLightTriggerLine"
    case trafficlosdetailvalue = "trafficLosDetailValue"
    case trafficlosvalue = "trafficLosValue"
    case trafficlosvalueextended = "trafficLosValueExtended"
    case trafficoccupancy = "trafficOccupancy"
    case travelator = "travelator"
    case triggerline = "triggerLine"
    case urbanpublictransportstation = "urbanPublicTransportStation"
    case waitingtime = "waitingTime"
}
