//
// Incident.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class Incident: Codable, Hashable {

    public var address: Address?
    public var dataType: DataType?
    public var description: String?
    public var id: String?
    public var imageId: String?
    public var location: Geometry?
    public var name: String?
    public var networkId: String?
    public var operatorId: String?
    public var removed: Bool?
    public var timestamp: Date?
    public var trafficType: TrafficType?
    public var uri: String?
    public var data: DoraData?
    public var consequence: ConsequenceType?
    public var direction: String?
    public var geometries: IncidentGeometry?
    public var geometry: IncidentGeometry?
    public var messageId: String?
    public var properties: [IncidentProperty]?
    public var reason: ReasonType?
    public var references: [Incident]?
    public var section: String?
    public var source: String?
    public var streets: [String]?
    public var validities: [ValidityType]?

    public init(address: Address? = nil, dataType: DataType? = nil, description: String? = nil, id: String? = nil, imageId: String? = nil, location: Geometry? = nil, name: String? = nil, networkId: String? = nil, operatorId: String? = nil, removed: Bool? = nil, timestamp: Date? = nil, trafficType: TrafficType? = nil, uri: String? = nil, data: DoraData? = nil, consequence: ConsequenceType? = nil, direction: String? = nil, geometries: IncidentGeometry? = nil, geometry: IncidentGeometry? = nil, messageId: String? = nil, properties: [IncidentProperty]? = nil, reason: ReasonType? = nil, references: [Incident]? = nil, section: String? = nil, source: String? = nil, streets: [String]? = nil, validities: [ValidityType]? = nil) {
        self.address = address
        self.dataType = dataType
        self.description = description
        self.id = id
        self.imageId = imageId
        self.location = location
        self.name = name
        self.networkId = networkId
        self.operatorId = operatorId
        self.removed = removed
        self.timestamp = timestamp
        self.trafficType = trafficType
        self.uri = uri
        self.data = data
        self.consequence = consequence
        self.direction = direction
        self.geometries = geometries
        self.geometry = geometry
        self.messageId = messageId
        self.properties = properties
        self.reason = reason
        self.references = references
        self.section = section
        self.source = source
        self.streets = streets
        self.validities = validities
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case dataType
        case description
        case id
        case imageId
        case location
        case name
        case networkId
        case operatorId
        case removed
        case timestamp
        case trafficType
        case uri
        case data
        case consequence
        case direction
        case geometries
        case geometry
        case messageId
        case properties
        case reason
        case references
        case section
        case source
        case streets
        case validities
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(dataType, forKey: .dataType)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(imageId, forKey: .imageId)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(networkId, forKey: .networkId)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(removed, forKey: .removed)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(trafficType, forKey: .trafficType)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(consequence, forKey: .consequence)
        try container.encodeIfPresent(direction, forKey: .direction)
        try container.encodeIfPresent(geometries, forKey: .geometries)
        try container.encodeIfPresent(geometry, forKey: .geometry)
        try container.encodeIfPresent(messageId, forKey: .messageId)
        try container.encodeIfPresent(properties, forKey: .properties)
        try container.encodeIfPresent(reason, forKey: .reason)
        try container.encodeIfPresent(references, forKey: .references)
        try container.encodeIfPresent(section, forKey: .section)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(streets, forKey: .streets)
        try container.encodeIfPresent(validities, forKey: .validities)
    }

    public static func == (lhs: Incident, rhs: Incident) -> Bool {
        lhs.address == rhs.address &&
        lhs.dataType == rhs.dataType &&
        lhs.description == rhs.description &&
        lhs.id == rhs.id &&
        lhs.imageId == rhs.imageId &&
        lhs.location == rhs.location &&
        lhs.name == rhs.name &&
        lhs.networkId == rhs.networkId &&
        lhs.operatorId == rhs.operatorId &&
        lhs.removed == rhs.removed &&
        lhs.timestamp == rhs.timestamp &&
        lhs.trafficType == rhs.trafficType &&
        lhs.uri == rhs.uri &&
        lhs.data == rhs.data &&
        lhs.consequence == rhs.consequence &&
        lhs.direction == rhs.direction &&
        lhs.geometries == rhs.geometries &&
        lhs.geometry == rhs.geometry &&
        lhs.messageId == rhs.messageId &&
        lhs.properties == rhs.properties &&
        lhs.reason == rhs.reason &&
        lhs.references == rhs.references &&
        lhs.section == rhs.section &&
        lhs.source == rhs.source &&
        lhs.streets == rhs.streets &&
        lhs.validities == rhs.validities
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address?.hashValue)
        hasher.combine(dataType?.hashValue)
        hasher.combine(description?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(imageId?.hashValue)
        hasher.combine(location?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(networkId?.hashValue)
        hasher.combine(operatorId?.hashValue)
        hasher.combine(removed?.hashValue)
        hasher.combine(timestamp?.hashValue)
        hasher.combine(trafficType?.hashValue)
        hasher.combine(uri?.hashValue)
        hasher.combine(data?.hashValue)
        hasher.combine(consequence?.hashValue)
        hasher.combine(direction?.hashValue)
        hasher.combine(geometries?.hashValue)
        hasher.combine(geometry?.hashValue)
        hasher.combine(messageId?.hashValue)
        hasher.combine(properties?.hashValue)
        hasher.combine(reason?.hashValue)
        hasher.combine(references?.hashValue)
        hasher.combine(section?.hashValue)
        hasher.combine(source?.hashValue)
        hasher.combine(streets?.hashValue)
        hasher.combine(validities?.hashValue)
        
    }
}

