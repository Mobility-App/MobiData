//
// DepartureArrival.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class DepartureArrival: Codable, Hashable {

    public var address: Address?
    public var dataType: DataType?
    public var description: String?
    public var id: String?
    public var imageId: String?
    public var location: Geometry?
    public var name: String?
    public var networkId: String?
    public var operatorId: String?
    public var removed: Bool?
    public var timestamp: Date?
    public var trafficType: TrafficType?
    public var uri: String?
    public var data: DoraData?
    public var expected: DepartureArrivalTime?
    public var line: String?
    public var scheduled: DepartureArrivalTime?
    public var source: String?
    public var stationId: String?
    public var stationName: String?
    public var status: DepartureStatus?

    public init(address: Address? = nil, dataType: DataType? = nil, description: String? = nil, id: String? = nil, imageId: String? = nil, location: Geometry? = nil, name: String? = nil, networkId: String? = nil, operatorId: String? = nil, removed: Bool? = nil, timestamp: Date? = nil, trafficType: TrafficType? = nil, uri: String? = nil, data: DoraData? = nil, expected: DepartureArrivalTime? = nil, line: String? = nil, scheduled: DepartureArrivalTime? = nil, source: String? = nil, stationId: String? = nil, stationName: String? = nil, status: DepartureStatus? = nil) {
        self.address = address
        self.dataType = dataType
        self.description = description
        self.id = id
        self.imageId = imageId
        self.location = location
        self.name = name
        self.networkId = networkId
        self.operatorId = operatorId
        self.removed = removed
        self.timestamp = timestamp
        self.trafficType = trafficType
        self.uri = uri
        self.data = data
        self.expected = expected
        self.line = line
        self.scheduled = scheduled
        self.source = source
        self.stationId = stationId
        self.stationName = stationName
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case dataType
        case description
        case id
        case imageId
        case location
        case name
        case networkId
        case operatorId
        case removed
        case timestamp
        case trafficType
        case uri
        case data
        case expected
        case line
        case scheduled
        case source
        case stationId
        case stationName
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(dataType, forKey: .dataType)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(imageId, forKey: .imageId)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(networkId, forKey: .networkId)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(removed, forKey: .removed)
        try container.encodeIfPresent(timestamp, forKey: .timestamp)
        try container.encodeIfPresent(trafficType, forKey: .trafficType)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(expected, forKey: .expected)
        try container.encodeIfPresent(line, forKey: .line)
        try container.encodeIfPresent(scheduled, forKey: .scheduled)
        try container.encodeIfPresent(source, forKey: .source)
        try container.encodeIfPresent(stationId, forKey: .stationId)
        try container.encodeIfPresent(stationName, forKey: .stationName)
        try container.encodeIfPresent(status, forKey: .status)
    }

    public static func == (lhs: DepartureArrival, rhs: DepartureArrival) -> Bool {
        lhs.address == rhs.address &&
        lhs.dataType == rhs.dataType &&
        lhs.description == rhs.description &&
        lhs.id == rhs.id &&
        lhs.imageId == rhs.imageId &&
        lhs.location == rhs.location &&
        lhs.name == rhs.name &&
        lhs.networkId == rhs.networkId &&
        lhs.operatorId == rhs.operatorId &&
        lhs.removed == rhs.removed &&
        lhs.timestamp == rhs.timestamp &&
        lhs.trafficType == rhs.trafficType &&
        lhs.uri == rhs.uri &&
        lhs.data == rhs.data &&
        lhs.expected == rhs.expected &&
        lhs.line == rhs.line &&
        lhs.scheduled == rhs.scheduled &&
        lhs.source == rhs.source &&
        lhs.stationId == rhs.stationId &&
        lhs.stationName == rhs.stationName &&
        lhs.status == rhs.status
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(address?.hashValue)
        hasher.combine(dataType?.hashValue)
        hasher.combine(description?.hashValue)
        hasher.combine(id?.hashValue)
        hasher.combine(imageId?.hashValue)
        hasher.combine(location?.hashValue)
        hasher.combine(name?.hashValue)
        hasher.combine(networkId?.hashValue)
        hasher.combine(operatorId?.hashValue)
        hasher.combine(removed?.hashValue)
        hasher.combine(timestamp?.hashValue)
        hasher.combine(trafficType?.hashValue)
        hasher.combine(uri?.hashValue)
        hasher.combine(data?.hashValue)
        hasher.combine(expected?.hashValue)
        hasher.combine(line?.hashValue)
        hasher.combine(scheduled?.hashValue)
        hasher.combine(source?.hashValue)
        hasher.combine(stationId?.hashValue)
        hasher.combine(stationName?.hashValue)
        hasher.combine(status?.hashValue)
        
    }
}

