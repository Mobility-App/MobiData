//
// PublicTransportLine.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class PublicTransportLine: Codable, Hashable {

    public var imageId: String?
    public var line: String?
    public var networkId: String?
    public var operatorId: String?
    public var trafficType: TrafficType?

    public init(imageId: String? = nil, line: String? = nil, networkId: String? = nil, operatorId: String? = nil, trafficType: TrafficType? = nil) {
        self.imageId = imageId
        self.line = line
        self.networkId = networkId
        self.operatorId = operatorId
        self.trafficType = trafficType
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case imageId
        case line
        case networkId
        case operatorId
        case trafficType
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(imageId, forKey: .imageId)
        try container.encodeIfPresent(line, forKey: .line)
        try container.encodeIfPresent(networkId, forKey: .networkId)
        try container.encodeIfPresent(operatorId, forKey: .operatorId)
        try container.encodeIfPresent(trafficType, forKey: .trafficType)
    }

    public static func == (lhs: PublicTransportLine, rhs: PublicTransportLine) -> Bool {
        lhs.imageId == rhs.imageId &&
        lhs.line == rhs.line &&
        lhs.networkId == rhs.networkId &&
        lhs.operatorId == rhs.operatorId &&
        lhs.trafficType == rhs.trafficType
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(imageId?.hashValue)
        hasher.combine(line?.hashValue)
        hasher.combine(networkId?.hashValue)
        hasher.combine(operatorId?.hashValue)
        hasher.combine(trafficType?.hashValue)
        
    }
}

